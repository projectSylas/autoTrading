# --- Imports ---\nimport logging\nfrom pandas import DataFrame\nfrom freqtrade.strategy import IStrategy, informative, IntParameter, DecimalParameter, CategoricalParameter\n\n# Import custom feature generator\ntry:\n    from src.crypto_trader.custom_features import generate_custom_features\n    CUSTOM_FEATURES_AVAILABLE = True\nexcept ImportError:\n    generate_custom_features = None\n    CUSTOM_FEATURES_AVAILABLE = False\n    logging.getLogger(__name__).error(\"Could not import generate_custom_features. Strategy may fail.\")\n\n# Optional: Import FreqAI specific types if needed for advanced configuration\n# from freqtrade.freqai.prediction_models.IFreqaiModel import IFreqaiModel\n# from freqtrade.freqai.data_kitchen import FreqaiDataKitchen\n\nlogger = logging.getLogger(__name__)\n\n# --- Strategy Class ---\nclass ExampleFreqAIStrategy(IStrategy): # Inherit from IStrategy, FreqAI is configured in config.json\n    \"\"\"\n    Example Freqtrade Strategy using FreqAI with custom sentiment features.\n\n    Requires FreqAI to be enabled and configured in the main config.json:\n    \"freqai\": {\n        \"enabled\": true,\n        \"purge_old_models\": true,\n        \"train_period_days\": 30,\n        \"backtest_period_days\": 7,\n        \"live_retrain_hours\": 6,\n        \"feature_engineering_space\": [...], // Define feature spaces if needed\n        \"model_training_space\": {\n            \"VolumeFeatureAbs\": {\n                 // Example for LightGBM\n                 \"model_name\": \"LightGBMRegressor\", // Or LGBMClassifier\n                 \"freqai_hyperoptable\": true,\n                 \"hyperopt_params\": {...} \n            }\n        },\n        \"data_split_parameters\": {...},\n        \"feature_parameters\": {\n            \"include_timeframes\": [\"1h\", \"4h\"], // Example additional timeframes\n            \"include_corr_pairlist\": [\"BTC/USDT\"],\n            \"label_period_candles\": 24, // Example: Predict 24 candles ahead\n            \"indicator_periods_candles\": [10, 20] // Example periods for TA indicators\n        },\n        \"identifier\": \"unique-strategy-id-for-models\"\n    }\n    \"\"\"\n\n    # --- Strategy Configuration ---\n    # Minimal ROI table (can be optimized by FreqAI or hyperopt)\n    minimal_roi = {\n        \"0\": 0.10,  # 10% profit after 0 minutes (example)\n        \"30\": 0.05, # 5% profit after 30 minutes\n        \"60\": 0.01\n    }\n\n    # Stoploss configuration\n    stoploss = -0.05  # 5% stoploss\n\n    # Trailing stoploss (example)\n    trailing_stop = True\n    trailing_stop_positive = 0.01\n    trailing_stop_positive_offset = 0.02\n    trailing_only_offset_is_reached = True\n\n    # Timeframe for the strategy\n    timeframe = \'1h\'\n\n    # Order types\n    order_types = {\n        \'entry\': \'limit\',\n        \'exit\': \'limit\',\n        \'stoploss\': \'market\',\n        \'stoploss_on_exchange\': False\n    }\n\n    # Order time in force\n    order_time_in_force = {\n        \'entry\': \'gtc\',\n        \'exit\': \'gtc\'\n    }\n\n    # --- FreqAI Configuration (accessed via config.json, but can define defaults/interfaces here) ---\n    # Define the identifier for FreqAI model storage/retrieval (MUST match config.json)\n    freqai_info = {\n        \"identifier\": \"unique-strategy-id-for-models\", # Match config.json[\"freqai\"][\"identifier\"]\n        \"feature_engineering_space\": [\"VolumeFeatureAbs\"], # Example feature set name\n        \"target_period_candles\": 24, # Example target lookahead\n        \"model_training_space\": [\"VolumeFeatureAbs\"], # Example model training config name\n    }\n\n    # --- Informative Indicators (Optional, for different timeframes) ---\n    # Example: Use 4h timeframe data\n    # @informative(\'4h\')\n    # def populate_indicators_4h(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n    #     dataframe[\'sma_200_4h\'] = ta.sma(dataframe, length=200)\n    #     return dataframe\n\n    # --- Main Indicator Population ---\n    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Populates indicators and custom features, including sentiment.\n        This is where generate_custom_features should be called.\n        FreqAI will use the features generated here.\n        \"\"\"\n        logger.info(f\"Populating indicators for {metadata[\'pair\']}...\")\n\n        if not CUSTOM_FEATURES_AVAILABLE or generate_custom_features is None:\n            logger.error(\"Custom feature generator is not available. Cannot populate features.\")\n            # Return dataframe without features to avoid errors downstream, though strategy will likely fail.\n            return dataframe\n\n        # Call the custom feature generator which includes TA and Sentiment\n        try:\n            # Pass the metadata which contains the pair name\n            dataframe = generate_custom_features(dataframe, metadata)\n            logger.info(f\"Successfully generated custom features for {metadata[\'pair\']}.\")\n        except Exception as e:\n            logger.error(f\"Error generating custom features for {metadata[\'pair\']}: {e}\", exc_info=True)\n            # Return original dataframe or handle error as appropriate\n\n        # FreqAI handles features defined in config.json[\"freqai\"];\n        # ensure columns generated by generate_custom_features match\n        # what FreqAI expects based on its feature_engineering config.\n\n        # Standard Freqtrade buy/sell signals are typically disabled when using FreqAI\n        # for predictions, but indicators can still be useful for plotting or simple overrides.\n\n        return dataframe\n\n    # --- FreqAI Prediction Logic (Used by Freqtrade Bot) ---\n    # FreqAI uses the trained model to generate predictions stored in the dataframe.\n    # The buy/sell signals below should use these predictions.\n\n    # Example: Accessing FreqAI predictions\n    # Predictions are stored in columns like \`&*_mean#*#\`, \`&*_sig\`, etc.\n    # The exact column names depend on your FreqAI config (label definition).\n\n    # --- Buy Signal Logic (Using FreqAI Predictions) ---\n    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Generates the buy signal based on FreqAI predictions.\n        Example: Buy if the predicted change (&*_mean) is above a threshold.\n        \"\"\"\n        if not self.config.get(\'runmode\') == \'live\': # Only log in dry/live run\n             logger.info(f\"Populating entry trend for {metadata[\'pair\']}...\")\n\n        # Default to no buy signal\n        dataframe[\'enter_long\'] = 0\n        dataframe[\'enter_tag\'] = \"\"\n\n        # --- Example using FreqAI prediction --- \n        # Check if FreqAI prediction column exists (replace with actual column name)\n        # The column name depends on the label definition in your FreqAI config\n        # Example: If label is \'%future_target_price_change_over_label_period_candles%\'\n        prediction_col = \'&*_mean\' # Placeholder - Use the actual prediction column name!\n        # Find the actual column name dynamically if possible\n        pred_cols = [col for col in dataframe.columns if col.startswith(\'&\') and col.endswith(\'_mean\')]\n        if pred_cols:\n            prediction_col = pred_cols[0] # Use the first found prediction mean column\n            logger.info(f\"Using FreqAI prediction column: {prediction_col}\")\n            \n            # Example entry condition: Predicted price increase is > 1%\n            # Adjust threshold based on backtesting/optimization\n            entry_threshold = 0.01 # Example: predict > 1% increase\n            dataframe.loc[\n                (dataframe[prediction_col] > entry_threshold),\n                [\'enter_long\', \'enter_tag\']\n            ] = (1, \'freqai_entry\')\n            entry_count = dataframe[\'enter_long\'].sum()\n            if entry_count > 0:\n                 logger.info(f\"Generated {entry_count} entry signals based on FreqAI prediction > {entry_threshold*100:.2f}%\")\n        else:\n            logger.warning(f\"FreqAI prediction column (\'%%_mean\') not found in dataframe. Cannot generate entry signals.\")\n        # --- End Example ---\n\n        return dataframe\n\n    # --- Sell Signal Logic (Using FreqAI or standard rules) ---\n    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:\n        \"\"\"\n        Generates the sell signal.\n        Can use FreqAI predictions (e.g., predict price decrease) or standard indicators.\n        \"\"\"\n        if not self.config.get(\'runmode\') == \'live\':\n            logger.info(f\"Populating exit trend for {metadata[\'pair\']}...\")\n            \n        # Default to no sell signal\n        dataframe[\'exit_long\'] = 0\n        dataframe[\'exit_tag\'] = \"\"\n\n        # --- Example using FreqAI prediction for exit --- \n        # Example: Sell if predicted price increase drops below 0.1%\n        prediction_col = \'&*_mean\' # Placeholder - Use the actual prediction column name!\n        pred_cols = [col for col in dataframe.columns if col.startswith(\'&\') and col.endswith(\'_mean\')]\n        if pred_cols:\n            prediction_col = pred_cols[0]\n            exit_threshold = 0.001 # Example: predict < 0.1% increase\n            dataframe.loc[\n                (dataframe[prediction_col] < exit_threshold),\n                [\'exit_long\', \'exit_tag\']\n            ] = (1, \'freqai_exit\')\n            exit_count = dataframe[\'exit_long\'].sum()\n            if exit_count > 0:\n                 logger.info(f\"Generated {exit_count} exit signals based on FreqAI prediction < {exit_threshold*100:.2f}%\")\n        else:\n             logger.warning(f\"FreqAI prediction column (\'%%_mean\') not found. Cannot generate FreqAI exit signals.\")\n        # --- End Example ---\n\n        # Can combine with other exit conditions if desired\n        # e.g., dataframe.loc[(dataframe[\'rsi\'] > 75), [\'exit_long\', \'exit_tag\']] = (1, \'rsi_overbought\')\n\n        return dataframe 